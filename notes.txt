An RTF file consists of unformatted text, control words, control symbols, and groups. For ease of transport, a standard RTF file can consist of only 7-bit ASCII characters. (Converters that communicate with Microsoft Word for Windows or Microsoft Word for the Macintosh should expect 8-bit characters.) There is no set maximum line length for an RTF file.

A control word is a specially formatted command that RTF uses to mark printer control codes and information that applications use to manage documents. A control word cannot be longer than 32 characters. A control word takes the following form:

\LetterSequence<Delimiter>
Note that a backslash begins each control word.

The LetterSequence is made up of lowercase alphabetic characters between "a" and "z" inclusive. RTF is case sensitive, and all RTF control words must be lowercase.

The delimiter marks the end of an RTF control word, and can be one of the following:

* A space. In this case, the space is part of the control word.

* A digit or a hyphen (-), which indicates that a numeric parameter follows. The subsequent digital sequence is then delimited by a space or any character other than a letter or a digit. The parameter can be a positive or a negative number. The range of the values for the number is generally -32767 through 32767. However, Word tends to restrict the range to -31680 through 31680. Word allows values in the range -2,147,483,648 to 2,147,483,648 for a small number of keywords (specifically \bin, \revdttm, and some picture properties). An RTF parser must handle an arbitrary string of digits as a legal value for a keyword. If a numeric parameter immediately follows the control word, this parameter becomes part of the control word. The control word is then delimited by a space or a nonalphabetic or nonnumeric character in the same manner as any other control word.

* Any character other than a letter or a digit. In this case, the delimiting character terminates the control word but is not actually part of the control word.

If a space delimits the control word, the space does not appear in the document. Any characters following the delimiter, including spaces, will appear in the document. For this reason, you should use spaces only where necessary; do not use spaces merely to break up RTF code.

A control symbol consists of a backslash followed by a single, nonalphabetic character. For example, \~ represents a nonbreaking space. Control symbols take no delimiters.

A group consists of text and control words or control symbols enclosed in braces ({ }). The opening brace ({ ) indicates the start of the group and the closing brace ( }) indicates the end of the group. Each group specifies the text affected by the group and the different attributes of that text. The RTF file can also include groups for fonts, styles, screen color, pictures, footnotes, comments (annotations), headers and footers, summary information, fields, and bookmarks, as well as document-, section-, paragraph-, and character-formatting properties. If the font, file, style, screen-color, revision mark, and summary-information groups and document-formatting properties are included, they must precede the first plain-text character in the document. These groups form the RTF file header. If the group for fonts is included, it should precede the group for styles. If any group is not used, it can be omitted. The groups are discussed in the following sections.

The control properties of certain control words (such as bold, italic, keep together, and so on) have only two states. When such a control word has no parameter or has a nonzero parameter, it is assumed that the control word turns on the property. When such a control word has a parameter of 0 , it is assumed that the control word turns off the property. For example, \b turns on bold, whereas \b0 turns off bold.

Certain control words, referred to as destinations, mark the beginning of a collection of related text that could appear at another position, or destination, within the document. Destinations may also be text that is used but should not appear within the document at all. An example of a destination is the \footnote group, where the footnote text follows the control word. Page breaks cannot occur in destination text. Destination control words and their following text must be enclosed in braces. No other control words or text may appear within the destination group. Destinations added after the RTF Specification published in the March 1987 Microsoft Systems Journal may be preceded by the control symbol \*. This control symbol identifies destinations whose related text should be ignored if the RTF reader does not recognize the destination. (RTF writers should follow the convention of using this control symbol when adding new destinations or groups.) Destinations whose related text should be inserted into the document even if the RTF reader does not recognize the destination should not use \*. All destinations that were not included in the March 1987 revision of the RTF Specification are shown with \* as part of the control word.

Formatting specified within a group affects only the text within that group. Generally, text within a group inherits the formatting of the text in the preceding group. However, Microsoft implementations of RTF assume that the footnote, annotation, header, and footer groups (described later in this chapter) do not inherit the formatting of the preceding text. Therefore, to ensure that these groups are always formatted correctly, you should set the formatting within these groups to the default with the \sectd, \pard, and \plain control words, and then add any desired formatting.

The control words, control symbols, and braces constitute control information. All other characters in the file are plain text. Here is an example of plain text that does not exist within a group:

The phrase "This is plain text" is not part of a group and is treated as document text.

As previously mentioned, the backslash (\) and braces ({ }) have special meaning in RTF. To use these characters as text, precede them with a backslash, as in \\, \{, and \}.


CONVENTIONS OF AN RTF READER
The reader of an RTF stream is concerned with the following:

* Separating control information from plain text.

* Acting on control information.

* Collecting and properly inserting text into the document, as directed by the current group state.

Acting on control information is designed to be a relatively simple process. Some control information simply contributes special characters to the plain text stream. Other information serves to change the program state, which includes properties of the document as a whole, or to change any of a collection of group states, which apply to parts of the document.

As previously mentioned, a group state can specify the following:

* The destination, or part of the document that the plain text is constructing.

* Character-formatting properties, such as bold or italic.

* Paragraph-formatting properties, such as justified or centered.

* Section-formatting properties, such as the number of columns.

* Table-formatting properties, which define the number of cells and dimensions of a table row.

In practice, an RTF reader will evaluate each character it reads in sequence as follows:

* If the character is an opening brace ({), the reader stores its current state on the stack. If the character is a closing brace (}), the reader retrieves the current state from the stack.

* If the character is a backslash (\), the reader collects the control word or control symbol and its parameter, if any, and looks up the control word or control symbol in a table that maps control words to actions. It then carries out the action prescribed in the table. (The possible actions are discussed below.) The read pointer is left before or after a control-word delimiter, as appropriate.

* If the character is anything other than an opening brace ({), closing brace (}), or backslash (\), the reader assumes that the character is plain text and writes the character to the current destination using the current formatting properties.

If the RTF reader cannot find a particular control word or control symbol in the look-up table described above, the control word or control symbol should be ignored. If a control word or control symbol is preceded by an opening brace ({), it is part of a group. The current state should be saved on the stack, but no state change should occur. When a closing brace (}) is encountered, the current state should be retrieved from the stack, thereby resetting the current state. If the \* control symbol precedes a control word, then it defines a destination group and was itself preceded by an opening brace ({). The RTF reader should discard all text up to and including the closing brace (}) that closes this group. All RTF readers must recognize all destinations defined in the March 1987 RTF Specification. The reader may skip past the group, but it is not allowed to simply discard the control word. Destinations defined since March 1987 are marked with the \* control symbol.

Note All RTF readers must implement the \* control symbol so that they can read RTF files written by newer RTF writers.

For control words or control symbols that the RTF reader can find in the look-up table, the possible actions are as follows.
Action	Description
Change Destination	The RTF reader changes the destination to the destination described in the table entry. Destination changes are legal only immediately after an opening brace ({ ). (Other restrictions may also apply; for example, footnotes cannot be nested.) Many destination changes imply that the current property settings will be reset to their default settings. Examples of control words that change destination are \footnote, \header, \footer, \pict, \info, \fonttbl, \stylesheet, and \colortbl. This Application Note identifies all destination control words where they appear in control-word tables.
Change Formatting Property	The RTF reader changes the property as described in the table entry. The entry will specify whether a parameter is required. The "Appendix C: Index of RTF Control Words" section at the end of this Application Note also specifies which control words require parameters. If a parameter is needed and not specified, then a default value will be used. The default value used depends on the control word. If the control word does not specify a default, then all RTF readers should assume a default of 0.
Insert Special Character	The reader inserts into the document the character code or codes described in the table entry.
Insert Special Character and Perform Action	The reader inserts into the document the character code or codes described in the table entry and performs whatever other action the entry specifies. For example, when Microsoft Word interprets \par, a paragraph mark is inserted in the document and special code is run to record the paragraph properties belonging to that paragraph mark.


Fields
The \field control word introduces a field destination, which contains the text of fields. Fields have the following syntax:
<field>	'{' \field <fieldmod>? <fieldinst> <fieldrslt> '}'
<fieldmod>	\flddirty? & \fldedit? & \fldlock? & \fldpriv?
<fieldinst>	'{\*' \fldinst <para>+ <fldalt>? '}'
<fldalt>	\fldalt
<fieldrslt>	'{' \fldrslt <para>+ '}'
There are several control words that alter the interpretation of the field. These control words are listed in the following table.
Control word	Meaning
\flddirty	A formatting change has been made to the field result since the field was last updated.
\fldedit	Text has been added to, or removed from, the field result since the field was last updated.
\fldlock	Field is locked and cannot be updated.
\fldpriv	Result is not in a form suitable for display (for example, binary data used by fields whose result is a picture).
Two subdestinations are required within the \field destination. They must be enclosed in braces ({ }) and begin with the following control words.
Control word	Meaning
\fldinst	Field instructions. This is a destination control word.
\fldrslt	Most recent calculated result of the field. This is a destination control word.
If the instruction for a field contains a file name, then the \cpg control can be used to define the character set of the file name. See "Code Page Support" on page 9 of this Application Note for details.

The \fldrslt control word should be included even if no result has been calculated because most readers (even those readers that do not recognize fields) can generally include the value of the \fldrslt destination in the document. A field result should not start with a table, because this will break some RTF readers.

An example of some field text follows:

{\field {\*\fldinst AUTHOR \\*MERGEFORMAT	}{\fldrslt Joe Smith}}\par\pard
{\field{\*\fldinst time \\@ "h:mm AM/PM"}{\fldrslt 8:12 AM}}
You can use the \fldalt control word to specify that the given field reference is to an endnote. For example, the following field in RTF is a reference to a footnote

{\field{\*\fldinst NOTEREF _RefNumber } {\fldrslt 1}}
The following is an example of a reference to an endnote

{\field{\*\fldinst NOTEREF _RefNumber \fldalt } {\fldrslt I}}
If the specified field is a form field, the \*\datafield destination appears as a part of <char> and contains the binary data of a form field instruction. For example:

{\field{\*\fldinst {\*\bkmkstart Text1} FORMTEXT
 {{\*\datafield 
00000000000000000554657874310008476565207768697a0000000000000000000000}}}
{\fldrslt Default Result}}
{\*\bkmkend Text1}
Note that the \datafield destination requires the \* prefix. The \fldtype, \date, \time, and \wpeqn field keywords should be ignored.


\f4\fs16 \cf0 Federal law {\field{\*\fldinst{HYPERLINK "https://casetext.com/statute/united-states-code/title-8-aliens-and-nationality/chapter-12-immigration-and-nationality/subchapter-ii-immigration/part-viii-general-penalty-provisions/section-1324-bringing-in-and-harboring-certain-aliens"}}{\fldrslt prohibits}} encouraging or inducing unlawful immigration for private financial gain. In March, the U.S. Supreme Court heard oral arguments in a case, {\field{\*\fldinst{HYPERLINK "https://www.supremecourt.gov/docket/docketfiles/html/public/22-179.html"}}{\fldrslt 
\f5\i United States v. Hansen}}, that asks whether that law unconstitutionally abridges freedom of speech. \
\pard\pardeftab720\fi240\ri1080\sl220\partightenfactor0
\cf0 The law deserves to die on First Amendment grounds. As the Rutherford Institute and the Foundation for Individual Rights and Expression observed in an {\field{\*\fldinst{HYPERLINK "https://www.supremecourt.gov/DocketPDF/22/22-179/255584/20230224164242264_Rutherford%20FIRE%20Amicus%20Br.pdf"}}{\fldrslt 
\f5\i amicus
\f4\i0  brief}} they filed in the case, \'93expressing disagreement with laws through advocacy of their violation\'94 is \'93part of a deeply rooted American tradition.\'94 That tradition includes abolitionists who urged defiance of pro-slavery statutes and civil rights activists who championed nonviolent resistance to Jim Crow laws. \'93Criminalizing mere encouragement of unlawful conduct,\'94 the brief warned, \'93would chill speech essential to movements advocating political and social change.\'94\
A modern hypothetical further illustrates the point. Assume that a self-described advocate of an open-borders immigration policy writes a book urging civil disobedience in the face of what the author argues is an unjust immigration regime. The book directly calls for undocumented immigrants to remain in the United States illegally and to fight for their rights.\
\pard\pardeftab720\fi240\ri1080\sl220\partightenfactor0
\cf0 \kerning1\expnd-1\expndtw-1
The sale of such a book would seem to violate the plain text of the federal prohibition on encouraging illegal immigration for financial gain. Yet the First Amendment just as clearly protects the author\'92s right to write and sell such a book. In that sort of contest between a federal law and a constitutional liberty, the Constitution always deserves to win.\
\pard\pardeftab720\fi240\ri1080\sl220\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 During {\field{\*\fldinst{HYPERLINK "https://www.supremecourt.gov/oral_arguments/argument_transcripts/2022/22-179_h3ci.pdf"}}{\fldrslt oral arguments}}, at least one justice seemed to concur. \'93Under this statute,\'94 Justice Sonia Sotomayor noted, \'93we\'92re criminalizing words related to immigration. And I thought there were only certain statutes that were immune to First Amendment challenges,\'94 such as laws governing \'93obscenity\'94 or \'93fighting words,\'94 while \'93everything else is subject to the First Amendment and strict scrutiny. So why should we uphold a statute that criminalizes words?\'94\
This statute \'93criminalizes words,\'94 Sotomayor stressed once again a few minutes later. \'93Shouldn\'92t we be careful before we uphold that kind of statute?\'94 It was exactly the right question to ask. Let us hope Sotomayor does not find herself penning the right answer in dissent.
\fs14 \kerning1\expnd0\expndtw1
 